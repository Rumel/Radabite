@{
	ViewBag.Title = "Create Event";
}

@*gets around problem with map controls from foundation.css*@
<style>
	#map-canvas img{
		max-width:inherit;
	}
</style>

<div class="row">
	<hgroup class="title">
		<h2>@User.Identity.Name's @ViewBag.Message</h2>
	</hgroup>

</div>

<div class="row">
	<h3>Step 1: Pick a Time!</h3>
	<div class="large-6 medium-6 columns">
		<div class="callout panel">
			<p>
				<a href="http://www.google.com/calendar/render?pli=1">Use Google Calendar</a>
			</p>
		</div>
	</div>
	<div class="large-6 medium-6 columns">
		<div class="callout panel">
			<p>
				<a href="http://www.doodle.com">Ask your Friends! (Doodle)</a>
			</p>
		</div>
	</div>
</div>

<div class="row">
	<h3>Step 2: Pick a Place!</h3>
	<div class="large-6 medium-6 columns">
		<div class="callout panel">
			
			<h5>Search for a location or click to drop a marker</h5>
			<div class="row">
				<div class="small-2 column">
					<input type="button" value="Search" onclick="searchAddress()">
				</div>
				<div class="small-10 column">
					<input id="address" type="text" value="Lincoln, NE">
				</div>
			</div>

			<div id="map-canvas" style="width: auto; height: 300px" />

		</div>
		<div class="callout panel">
			<input id="address-box" value="Address" style="width: 100%" />
			<p id="lat-box">Lat</p>
			<p id="long-box">Long</p>
		</div>
	</div>
</div>

<div class="row">
	<h3>Step 3: Public or Private?</h3>
	<div class="large-6 medium-6 columns">
		<input type="radio" id="red">
		<label for="red">Public</label>
		<input type="radio" id="blue">
		<label for="blue">Private</label>
	</div>
</div>

<div class="row">
	<h3>Step 4: Invite Your Friends!</h3>
	<div class="large-6 medium-6 columns">
		<div class="callout panel">
			<p>
				<a href=".">Choose Friends!</a>
			</p>
		</div>
	</div>
</div>

<script type="text/javascript">


	window.google = window.google || {};
	google.maps = google.maps || {};
	(function () {

		function getScript(src) {
			document.write('<' + 'script src="' + src + '"' +
						   ' type="text/javascript"><' + '/script>');
		}

		var modules = google.maps.modules = {};
		google.maps.__gjsload__ = function (name, text) {
			modules[name] = text;
		};

		google.maps.Load = function (apiLoad) {
			delete google.maps.Load;
			apiLoad([0.009999999776482582, [[["https://mts0.googleapis.com/vt?lyrs=m@254000000\u0026src=api\u0026hl=en-US\u0026", "https://mts1.googleapis.com/vt?lyrs=m@254000000\u0026src=api\u0026hl=en-US\u0026"], null, null, null, null, "m@254000000", ["https://mts0.google.com/vt?lyrs=m@254000000\u0026src=api\u0026hl=en-US\u0026", "https://mts1.google.com/vt?lyrs=m@254000000\u0026src=api\u0026hl=en-US\u0026"]], [["https://khms0.googleapis.com/kh?v=145\u0026hl=en-US\u0026", "https://khms1.googleapis.com/kh?v=145\u0026hl=en-US\u0026"], null, null, null, 1, "145", ["https://khms0.google.com/kh?v=145\u0026hl=en-US\u0026", "https://khms1.google.com/kh?v=145\u0026hl=en-US\u0026"]], [["https://mts0.googleapis.com/vt?lyrs=h@254000000\u0026src=api\u0026hl=en-US\u0026", "https://mts1.googleapis.com/vt?lyrs=h@254000000\u0026src=api\u0026hl=en-US\u0026"], null, null, null, null, "h@254000000", ["https://mts0.google.com/vt?lyrs=h@254000000\u0026src=api\u0026hl=en-US\u0026", "https://mts1.google.com/vt?lyrs=h@254000000\u0026src=api\u0026hl=en-US\u0026"]], [["https://mts0.googleapis.com/vt?lyrs=t@132,r@254000000\u0026src=api\u0026hl=en-US\u0026", "https://mts1.googleapis.com/vt?lyrs=t@132,r@254000000\u0026src=api\u0026hl=en-US\u0026"], null, null, null, null, "t@132,r@254000000", ["https://mts0.google.com/vt?lyrs=t@132,r@254000000\u0026src=api\u0026hl=en-US\u0026", "https://mts1.google.com/vt?lyrs=t@132,r@254000000\u0026src=api\u0026hl=en-US\u0026"]], null, null, [["https://cbks0.googleapis.com/cbk?", "https://cbks1.googleapis.com/cbk?"]], [["https://khms0.googleapis.com/kh?v=84\u0026hl=en-US\u0026", "https://khms1.googleapis.com/kh?v=84\u0026hl=en-US\u0026"], null, null, null, null, "84", ["https://khms0.google.com/kh?v=84\u0026hl=en-US\u0026", "https://khms1.google.com/kh?v=84\u0026hl=en-US\u0026"]], [["https://mts0.googleapis.com/mapslt?hl=en-US\u0026", "https://mts1.googleapis.com/mapslt?hl=en-US\u0026"]], [["https://mts0.googleapis.com/mapslt/ft?hl=en-US\u0026", "https://mts1.googleapis.com/mapslt/ft?hl=en-US\u0026"]], [["https://mts0.googleapis.com/vt?hl=en-US\u0026", "https://mts1.googleapis.com/vt?hl=en-US\u0026"]], [["https://mts0.googleapis.com/mapslt/loom?hl=en-US\u0026", "https://mts1.googleapis.com/mapslt/loom?hl=en-US\u0026"]], [["https://mts0.googleapis.com/mapslt?hl=en-US\u0026", "https://mts1.googleapis.com/mapslt?hl=en-US\u0026"]], [["https://mts0.googleapis.com/mapslt/ft?hl=en-US\u0026", "https://mts1.googleapis.com/mapslt/ft?hl=en-US\u0026"]], [["https://mts0.googleapis.com/mapslt/loom?hl=en-US\u0026", "https://mts1.googleapis.com/mapslt/loom?hl=en-US\u0026"]]], ["en-US", "US", null, 0, null, null, "https://maps.gstatic.com/mapfiles/", "https://csi.gstatic.com", "https://maps.googleapis.com", "https://maps.googleapis.com"], ["https://maps.gstatic.com/intl/en_us/mapfiles/api-3/16/1", "3.16.1"], [349462111], 1, null, null, null, null, 1, "", null, null, 1, "https://khms.googleapis.com/mz?v=145\u0026", "AIzaSyC9mnrBBjZsNVYhGYaDEh8I-XwkKa0yW74", "https://earthbuilder.googleapis.com", "https://earthbuilder.googleapis.com", null, "https://mts.googleapis.com/vt/icon", [["https://mts0.googleapis.com/vt", "https://mts1.googleapis.com/vt"], ["https://mts0.googleapis.com/vt", "https://mts1.googleapis.com/vt"], [null, [[0, "m", 254000000]], [null, "en-US", "US", null, 18, null, null, null, null, null, null, [[47], [37, [["smartmaps"]]]]], 0], [null, [[0, "m", 254000000]], [null, "en-US", "US", null, 18, null, null, null, null, null, null, [[47], [37, [["smartmaps"]]]]], 3], [null, [[0, "m", 254000000]], [null, "en-US", "US", null, 18, null, null, null, null, null, null, [[50], [37, [["smartmaps"]]]]], 0], [null, [[0, "m", 254000000]], [null, "en-US", "US", null, 18, null, null, null, null, null, null, [[50], [37, [["smartmaps"]]]]], 3], [null, [[4, "t", 132], [0, "r", 132000000]], [null, "en-US", "US", null, 18, null, null, null, null, null, null, [[5], [37, [["smartmaps"]]]]], 0], [null, [[4, "t", 132], [0, "r", 132000000]], [null, "en-US", "US", null, 18, null, null, null, null, null, null, [[5], [37, [["smartmaps"]]]]], 3], [null, null, [null, "en-US", "US", null, 18], 0], [null, null, [null, "en-US", "US", null, 18], 3], [null, null, [null, "en-US", "US", null, 18], 6], [null, null, [null, "en-US", "US", null, 18], 0], ["https://mts0.google.com/vt", "https://mts1.google.com/vt"], "/maps/vt"], 2, 500], loadScriptTime);
		};
		var loadScriptTime = (new Date).getTime();
		getScript("https://maps.gstatic.com/intl/en_us/mapfiles/api-3/16/1/main.js");
	})();
</script>

<!--geometa.js from a Google example (Gears)-->
<script type="text/javascript">
	// From
	// http://google-ajax-examples.googlecode.com/svn/trunk/whereareyou/scripts/geometa.js
	function prepareGeolocation(opt_force) {
		if (opt_force || typeof navigator.geolocation == "undefined" || navigator.geolocation.shim) (function () {

			// -- BEGIN GEARS_INIT
			(function () {
				// We are already defined. Hooray!
				if (window.google && google.gears) {
					return;
				}

				var factory = null;

				// Firefox
				if (typeof GearsFactory != 'undefined') {
					factory = new GearsFactory();
				} else {
					// IE
					try {
						factory = new ActiveXObject('Gears.Factory');
						// privateSetGlobalObject is only required and supported on WinCE.
						if (factory.getBuildInfo().indexOf('ie_mobile') != -1) {
							factory.privateSetGlobalObject(this);
						}
					} catch (e) {
						// Safari
						if ((typeof navigator.mimeTypes != 'undefined')
							 && navigator.mimeTypes["application/x-googlegears"]) {
							factory = document.createElement("object");
							factory.style.display = "none";
							factory.width = 0;
							factory.height = 0;
							factory.type = "application/x-googlegears";
							document.documentElement.appendChild(factory);
						}
					}
				}

				// *Do not* define any objects if Gears is not installed. This mimics the
				// behavior of Gears defining the objects in the future.
				if (!factory) {
					return;
				}

				// Now set up the objects, being careful not to overwrite anything.
				//
				// Note: In Internet Explorer for Windows Mobile, you can't add properties to
				// the window object. However, global objects are automatically added as
				// properties of the window object in all browsers.
				if (!window.google) {
					google = {};
				}

				if (!google.gears) {
					google.gears = { factory: factory };
				}
			})();
			// -- END GEARS_INIT

			var GearsGeoLocation = (function () {
				// -- PRIVATE
				var geo = google.gears.factory.create('beta.geolocation');

				var wrapSuccess = function (callback, self) { // wrap it for lastPosition love
					return function (position) {
						callback(position);
						self.lastPosition = position;
					}
				}

				// -- PUBLIC
				return {
					shim: true,

					type: "Gears",

					lastPosition: null,

					getCurrentPosition: function (successCallback, errorCallback, options) {
						var self = this;
						var sc = wrapSuccess(successCallback, self);
						geo.getCurrentPosition(sc, errorCallback, options);
					},

					watchPosition: function (successCallback, errorCallback, options) {
						geo.watchPosition(successCallback, errorCallback, options);
					},

					clearWatch: function (watchId) {
						geo.clearWatch(watchId);
					},

					getPermission: function (siteName, imageUrl, extraMessage) {
						geo.getPermission(siteName, imageUrl, extraMessage);
					}

				};
			})();

			var AjaxGeoLocation = (function () {
				// -- PRIVATE
				var loading = false;
				var loadGoogleLoader = function () {
					if (!hasGoogleLoader() && !loading) {
						loading = true;
						var s = document.createElement('script');
						s.src = 'http://www.google.com/jsapi?callback=_google_loader_apiLoaded';
						s.type = "text/javascript";
						document.getElementsByTagName('body')[0].appendChild(s);
					}
				};

				var queue = [];
				var addLocationQueue = function (callback) {
					queue.push(callback);
				}

				var runLocationQueue = function () {
					if (hasGoogleLoader()) {
						while (queue.length > 0) {
							var call = queue.pop();
							call();
						}
					}
				}

				window['_google_loader_apiLoaded'] = function () {
					runLocationQueue();
				}

				var hasGoogleLoader = function () {
					return (window['google'] && google['loader']);
				}

				var checkGoogleLoader = function (callback) {
					if (hasGoogleLoader()) return true;

					addLocationQueue(callback);

					loadGoogleLoader();

					return false;
				};

				loadGoogleLoader(); // start to load as soon as possible just in case

				// -- PUBLIC
				return {
					shim: true,

					type: "ClientLocation",

					lastPosition: null,

					getCurrentPosition: function (successCallback, errorCallback, options) {
						var self = this;
						if (!checkGoogleLoader(function () {
							self.getCurrentPosition(successCallback, errorCallback, options);
						})) return;

						if (google.loader.ClientLocation) {
							var cl = google.loader.ClientLocation;

							var position = {
								latitude: cl.latitude,
								longitude: cl.longitude,
								altitude: null,
								accuracy: 43000, // same as Gears accuracy over wifi?
								altitudeAccuracy: null,
								heading: null,
								velocity: null,
								timestamp: new Date(),

								// extra info that is outside of the bounds of the core API
								address: {
									city: cl.address.city,
									country: cl.address.country,
									country_code: cl.address.country_code,
									region: cl.address.region
								}
							};

							successCallback(position);

							this.lastPosition = position;
						} else if (errorCallback === "function") {
							errorCallback({ code: 3, message: "Using the Google ClientLocation API and it is not able to calculate a location." });
						}
					},

					watchPosition: function (successCallback, errorCallback, options) {
						this.getCurrentPosition(successCallback, errorCallback, options);

						var self = this;
						var watchId = setInterval(function () {
							self.getCurrentPosition(successCallback, errorCallback, options);
						}, 10000);

						return watchId;
					},

					clearWatch: function (watchId) {
						clearInterval(watchId);
					},

					getPermission: function (siteName, imageUrl, extraMessage) {
						// for now just say yes :)
						return true;
					}

				};
			})();

			// If you have Gears installed use that, else use Ajax ClientLocation
			navigator.geolocation = (window.google && google.gears && google.gears.factory.create) ? GearsGeoLocation : AjaxGeoLocation;

		})();
	}
</script>

<script type="text/javascript">
	var map;
	var geocoder;
	var marker;
	function initialize() {
		geocoder = new google.maps.Geocoder();
		var mapOptions = {
			zoom: 12,
			draggableCursor: 'default'
		};
		map = new google.maps.Map(document.getElementById("map-canvas"),
			mapOptions);

		google.maps.event.addListener(map, 'click', function (event) {
			moveMarker(event.latLng);
		});

		marker = new google.maps.Marker({
			map: map
		});

		//Sets location to current location if possible, else starts at a default location
		prepareGeolocation();
		if (navigator.geolocation) {
			navigator.geolocation.getCurrentPosition(positionSuccess, positionError);
		} else {
			positionError(-1);
		}
	}
	function positionError(err) {
		//Defaults to Lincoln, NE
		var startLocation = new google.maps.LatLng(40.81, -96.68);
		map.setCenter(startLocation);
		moveMarker(startLocation);
	}
	function positionSuccess(position) {
		// Centre the map on the new location
		var coords = position.coords || position.coordinate || position;
		var latLng = new google.maps.LatLng(coords.latitude, coords.longitude);
		map.setCenter(latLng);
		moveMarker(latLng);
	}
	function moveMarker(location) {
		marker.setPosition(location);

		//write to the "form"
		readMarkerAddress();
		document.getElementById('lat-box').innerHTML = location.lat();
		document.getElementById('long-box').innerHTML = location.lng();
	}
	function searchAddress() {
		var address = document.getElementById("address").value;
		geocoder.geocode({ 'address': address }, function (results, status) {
			if (status == google.maps.GeocoderStatus.OK) {
				map.setCenter(results[0].geometry.location);
				moveMarker(results[0].geometry.location);
			} else {
				alert("Geocode was not successful for the following reason: " + status);
			}
		});
	}
	function readMarkerAddress() {
		var addressBox = document.getElementById('address-box');
		geocoder.geocode({ 'latLng': marker.getPosition() }, function (results, status) {
			if (status == google.maps.GeocoderStatus.OK) {
				if (results[1]) {
					addressBox.value = results[0].formatted_address;
				}
				else {
					addressBox.value = 'No address found';
				}
			}
			else {
				alert('Error: Geocoder failed: ', status);
				addressBox.value = 'Error with map';
			}
		})
	}
	google.maps.event.addDomListener(window, 'load', initialize);
</script>