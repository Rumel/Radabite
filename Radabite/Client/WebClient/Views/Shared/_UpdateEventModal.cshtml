@model Radabite.Models.EventModel

<script type="text/javascript">

	$(document).ready(function () {
		$("#startDatepickerUpdate").datepicker({
			minDate: new Date(),		//default is today
			onClose: function (selectedDate) {
				$("#endDatepickerUpdate").datepicker("option", "minDate", selectedDate);
			}
		});
		$("#endDatepickerUpdate").datepicker({
			onClose: function (selectedDate) {
				$("#startDatepickerUpdate").datepicker("option", "maxDate", selectedDate);
			}
		});
	});
</script>
<script>

	jQuery(function () {
		$("#startTimepickerUpdate").timePicker({
			startTime: "0:00",  // Using string. Can take string or Date object.
			endTime: "23:59", //new Date(0, 0, 0, 23, 45, 0),  // Using Date object.
			show24Hours: false,
			separator: ':',
			step: 30
		});
		$("#endTimepickerUpdate").timePicker({
			startTime: "0:00",  // Using string. Can take string or Date object.
			endTime: "23:59", //new Date(0, 0, 0, 23, 45, 0),  // Using Date object.
			show24Hours: false,
			separator: ':',
			step: 30
		});
	});

	$(document).on('open', '[data-reveal]', function () {
		var modal = $(this);

		if (modal.attr('id') == 'UpdateEventModal') {
			var startTimePick = document.getElementById('startTimepickerUpdateSelect');
			var endTimePick = document.getElementById('endTimepickerUpdateSelect');

			var startInput = document.getElementById('startTimeUpdate');
			var endInput = document.getElementById('endTimeUpdate');
			var startDT = new Date(startInput.value);
			var endDT = new Date(endInput.value);

			startTimePick.selectedIndex = startDT.getHours() * 2 + (startDT.getMinutes() / 30);
			endTimePick.selectedIndex = endDT.getHours() * 2 + (endDT.getMinutes() / 30);

			$('#startDatepickerUpdate').val($.datepicker.formatDate('mm/dd/yy', startDT));
			$('#endDatepickerUpdate').val($.datepicker.formatDate('mm/dd/yy', endDT));
		}
	});
</script>

<div id="UpdateEventModal" class="reveal-modal small" data-reveal>
    <h2>Update your Event!</h2>
	@using (Html.BeginForm("Update", "Event", FormMethod.Post, new { onSubmit = "FillUpdateTimes()" }))
    {
        <div class="row">
			<div class="large-11 columns">
                @Html.TextBoxFor(m => m.Title, new { placeholder = Model.Title })
                @Html.ValidationMessageFor(m => m.Title)
            </div>
        </div>
        <div class="row">
			<div class="large-11 columns">
                @Html.TextBoxFor(m => m.Description, new { placeholder = Model.Description })
                @Html.ValidationMessageFor(m => m.Description)
            </div>
        </div>
        <div class="row">
			<div class="large-11 columns">
                @Html.TextBoxFor(m => m.LocationName, new { placeholder = Model.LocationName, id = "locationInputUpdate" })
                @Html.ValidationMessageFor(m => m.LocationName)
            </div>
			<div class="large-1 columns" style="padding: 0px">
				<span data-tooltip class="has-tip" title="Click to select a location with Google Maps!">
					<a data-reveal-id="CreateEvent-MapModal" href="#">
						<img src="~/Client/WebClient/Content/Images/fi-marker.svg" width="37" height="37" />
					</a>
				</span>
            </div>
        </div>
        <div class="row">
			<div class="small-3 columns">
				<h5>Start time:</h5>
            </div>
			<div class="small-4 columns">
				<input id="startDatepickerUpdate" style="padding: 8px ; margin:0px ; width: 100%" type="text" readonly/>
            </div>
			<div class="small-4 columns">
				<div id="startTimepickerUpdate"></div>
			</div>
			<div class="small-1 columns"></div>
		</div>
		<div class="row">
			<div class="small-3 columns">
				<h5>End time:</h5>
			</div>
			<div class="small-4 columns">
				<input id="endDatepickerUpdate" style="padding: 8px ; margin:0px ; width: 100%" type="text" readonly/>
			</div>
			<div class="small-4 columns">
				<div id="endTimepickerUpdate"></div>
            </div>
			<div class="small-1 columns"></div>
        </div>
        <div class="row">
			<div class="large-10 columns">
                Public Event: @Html.RadioButtonFor(m => m.IsPrivate, false, (Model.IsPrivate) ? "" : "new { @checked = \"checked\" }")
				Private Event: @Html.RadioButtonFor(m => m.IsPrivate, true, (Model.IsPrivate) ? "new { @checked = \"checked\" }" : "")
            </div>
			@Html.HiddenFor(m => m.Id)
        </div>
		<div class="row">
			<div class="large-12 columns">
				Use a poll to pick times
				Yes: @Html.RadioButtonFor(m => m.PollIsActive, true)
				No: @Html.RadioButtonFor(m => m.PollIsActive, false)
			</div>
		</div>
		<input type="submit" value="Update" id="UpdateSubmitButton">
        <a class="close-reveal-modal">&#215;</a>
        @Html.HiddenFor(m => m.Latitude, new { placeholder = Model.Latitude, id = "mapLatitudeUpdate" })
		@Html.HiddenFor(m => m.Longitude, new { placeholder = Model.Longitude, id = "mapLongitudeUpdate" })
		@Html.HiddenFor(m => m.StartTime, new { id = "startTimeUpdate" })
		@Html.HiddenFor(m => m.EndTime, new { id = "endTimeUpdate" })
	}
</div>

<script>
	FillUpdateTimes = function () {
		var startForm = document.getElementById('startTimeUpdate');
		var endForm = document.getElementById('endTimeUpdate');
		var startDate = document.getElementById('startDatepickerUpdate').value;
		var endDate = document.getElementById('endDatepickerUpdate').value;
		var startTimeSelect = document.getElementById('startTimepickerUpdateSelect');
		var startTime = startTimeSelect.options[startTimeSelect.selectedIndex].text;
		var endTimeSelect = document.getElementById('endTimepickerUpdateSelect');
		var endTime = endTimeSelect.options[endTimeSelect.selectedIndex].text;

		startForm.value = startDate + ' ' + startTime;
		endForm.value = endDate + ' ' + endTime;
	}
</script>