@model Radabite.Models.EventModel

<style>
	.has-tip {
		border-bottom: none;
	}

	.has-tip:hover, .has-tip:focus {
		border-bottom: none;
	}
</style>

<script>
	var calledFrom;
	$(document).on('opened', '[data-reveal]', function () {

		var modal = $(this);

		//Google Analytics
		if (modal.attr('id') == 'CreateEvent-MapModal') {
			ga('send', {
				'hitType': 'event',
				'eventCategory': 'Map Click',
				'eventAction': 'click',
			});
		}
		if (modal.attr('id') == 'CreateEvent-CalendarModal') {
			ga('send', {
				'hitType': 'event',
				'eventCategory': 'Calendar Click',
				'eventAction': 'click',
			});
		}

		//for dealing with different between CreateEventModal and UpdateEventModal:
		if (modal.attr('id') == 'CreateEventModal' || modal.attr('id') == 'UpdateEventModal') {
			calledFrom = modal.attr('id');
		}

		if (modal.attr('id') == 'CreateEvent-CalendarModal' && calledFrom == 'UpdateEventModal') {
			//fill the values in the time modal with the values from the event being edited
			var startDate = document.getElementById('startDatepicker');
			var startTime = document.getElementById('startTimepickerSelect');
			var endDate = document.getElementById('endDatepicker');
			var endTime = document.getElementById('endTimepickerSelect');

			var startInput = document.getElementById('startTimeUpdate');
			var endInput = document.getElementById('endTimeUpdate');
			var startDT = new Date(startInput.value);
			var endDT = new Date(endInput.value);

			startDate.value = startDT.toLocaleDateString();
			endDate.value = endDT.toLocaleDateString();

			startTime.selectedIndex = startDT.getHours() * 2 + (startDT.getMinutes() / 30);
			endTime.selectedIndex = endDT.getHours() * 2 + (endDT.getMinutes() / 30);
		}

		if (modal.attr('id') == 'CreateEvent-MapModal' && calledFrom == 'UpdateEventModal') {

			var lat = document.getElementById('mapLatitudeUpdate').value;

			//loads the address into the map if it was valid
			if (lat != -1000) {
				document.getElementById('address').value = document.getElementById('locationInputUpdate').value;
			} else {
				document.getElementById('address').value = 'Lincoln, NE';
			}

			searchAddress();
			google.maps.event.trigger(map, 'resize');
		}
	});
	backToCaller = function () {
		if (calledFrom == 'CreateEventModal') {
			$('#CreateEventModal').foundation('reveal', 'open');
		} else {
			$('#UpdateEventModal').foundation('reveal', 'open');
		}
	}
</script>

<div id="CreateEventModal" class="reveal-modal small" data-reveal>
	<h2>Create an Event!</h2>
	@using (Html.BeginForm("Create", "Event", FormMethod.Post))
	{
		<div class="row">
			<div class="large-10 columns">
				@Html.TextBoxFor(m => m.Title, new { placeholder = "Event Title" })
				@Html.ValidationMessageFor(m => m.Title)
			</div>
		</div>
		<div class="row">
			<div class="large-10 columns">
				@Html.TextBoxFor(m => m.Description, new { placeholder = "Event Description" })
				@Html.ValidationMessageFor(m => m.Description)
			</div>
		</div>
		<div class="row">
			<div class="large-10 columns">
				@Html.TextBoxFor(m => m.LocationName, new { placeholder = "Event Location", id = "locationInput" })
				@Html.ValidationMessageFor(m => m.LocationName)
			</div>
			<div class="large-2 columns">
				<span data-tooltip class="has-tip" title="Click to select a location with Google Maps!">
					<a data-reveal-id="CreateEvent-MapModal" href="#">
						<img src="~/Client/WebClient/Content/Images/fi-marker.svg" width="37" height="37" />
					</a>
				</span>
			</div>
		</div>
		<div class="row">
			<div class="large-10 columns">
				@Html.TextBoxFor(m => m.StartTime, new { @Value = "", id = "startTimeInput", placeholder = "Start Time" })
				@Html.ValidationMessageFor(m => m.StartTime)
			</div>
			<div class="large-2 columns">
				<span data-tooltip class="has-tip" title="Click to select a start and end time!">
					<a data-reveal-id="CreateEvent-CalendarModal" href="#">
						<img src="~/Client/WebClient/Content/Images/fi-calendar.svg" width="37" height="37" />
					</a>
				</span>
			</div>
		</div>
		<div class="row">
			<div class="large-10 columns">
				@Html.TextBoxFor(m => m.EndTime, new { @Value = "", id = "endTimeInput", placeholder = "End Time" })
				@Html.ValidationMessageFor(m => m.EndTime)
			</div>
		</div>
		<div class="row">
			<div class="large-12 columns">
				Public Event: @Html.RadioButtonFor(m => m.IsPrivate, false, new { @checked = "checked" })
				Private Event: @Html.RadioButtonFor(m => m.IsPrivate, true)
			</div>
		</div>
		<div class="row">
			<div class="large-12 columns">
				@Html.CheckBoxFor(m => m.ToFacebook, true) Make a post to Facebook inviting friends to your event?
			</div>
		</div>
		<input type="submit" value="Create" id="CreateSubmitButton" class="radius button">
		<a class="close-reveal-modal">&#215;</a>


		@Html.HiddenFor(m => m.Latitude, new { id = "mapLatitude", Value = "-1000" })
		@Html.HiddenFor(m => m.Longitude, new { id = "mapLongitude", Value = "-1000" })
	}
</div>


@Html.Partial("~/Client/WebClient/Views/Shared/_LocationPicker.cshtml", Model)
@Html.Partial("~/Client/WebClient/Views/Shared/_DateTimeModal.cshtml", Model)

<script>
	$('#CreateSubmitButton').on('click', function () {
		var usedMap;
		if (document.getElementById('mapLatitude').value == -1000) {
			usedMap = 'no map';
		} else {
			usedMap = 'map';
		}

		ga('send', {
			'hitType': 'event',
			'eventCategory': 'Event created',
			'eventLabel': usedMap,
		});
	});
</script>
